// FIX: Added import for React to resolve JSX namespace errors.
import React from 'react';
import { rankMap, EffectSelector } from '../ElementHelpers';

interface ItemFormProps {
    formData: any;
    renderField: (id: string, label: string, type: 'text' | 'textarea' | 'number' | 'select' | 'checkbox', options?: any, placeholder?: string) => JSX.Element;
    renderAttributeFields: () => JSX.Element;
    handleChange: (field: string, value: any) => void;
    handleEffectIdsChange: (ids: string[]) => void;
    handleEffectSelectorOpen: () => void;
}

export const ItemForm: React.FC<ItemFormProps> = ({
    formData,
    renderField,
    renderAttributeFields,
    handleChange,
    handleEffectIdsChange,
    handleEffectSelectorOpen
}) => {
    const recoverySummaryParts = [];
    if (formData.recoveryHp > 0) recoverySummaryParts.push(`sinh l·ª±c +${formData.recoveryHp}`);
    if (formData.recoverySpiritPower > 0) recoverySummaryParts.push(`linh l·ª±c +${formData.recoverySpiritPower}`);
    if (formData.recoveryStamina > 0) recoverySummaryParts.push(`th·ªÉ l·ª±c +${formData.recoveryStamina}`);
    if (formData.recoveryMentalState > 0) recoverySummaryParts.push(`t√¢m c·∫£nh +${formData.recoveryMentalState}`);

    let recoveryOverTimeLabel = 'C√≥ t√°c d·ª•ng theo l∆∞·ª£t?';
    if (formData.enableRecoveryOverTime && recoverySummaryParts.length > 0) {
        recoveryOverTimeLabel = `M·ªói l∆∞·ª£t h·ªìi ph·ª•c ${recoverySummaryParts.join(', ')}`;
    }

    return (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-x-8 gap-y-4">
            {/* Left Column */}
            <div className="space-y-4">
                {renderField('name', 'T√™n v·∫≠t ph·∫©m', 'text', undefined, 'V√≠ d·ª•: H·ªìi Linh ƒêan')}
                {renderField('description', 'M√¥ t·∫£', 'textarea', undefined, 'ƒêan d∆∞·ª£c c·∫•p th·∫•p gi√∫p h·ªìi ph·ª•c m·ªôt l∆∞·ª£ng nh·ªè linh l·ª±c.')}
                <div className="grid grid-cols-2 gap-4">
                    {renderField('quantity', 'S·ªë l∆∞·ª£ng', 'number')}
                    {renderField('rank', 'Ph·∫©m ch·∫•t', 'select', Object.keys(rankMap))}
                </div>
                 <div className="grid grid-cols-2 gap-4">
                    {renderField('itemType', 'Lo·∫°i v·∫≠t ph·∫©m', 'select', ['Ti√™u hao', 'Nhi·ªám v·ª•', 'Kh√°c'])}
                    {formData.itemType === 'Ti√™u hao' && renderField('consumableType', 'Ph√¢n lo·∫°i ti√™u hao', 'select', ['ƒêan d∆∞·ª£c', 'Th·∫£o d∆∞·ª£c', 'V·∫≠t li·ªáu', 'Kho√°ng th·∫°ch', 'Kh√°c'])}
                </div>
                {formData.itemType === 'Ti√™u hao' && formData.consumableType && formData.consumableType !== 'ƒêan d∆∞·ª£c' && renderField('isCraftable', 'C√≥ th·ªÉ luy·ªán ch·∫ø?', 'checkbox')}
                <div>
                    <label htmlFor="nguHanhAttribute" className="block text-sm font-medium text-yellow-300 mb-1">Thu·ªôc t√≠nh Ng≈© H√†nh</label>
                    <select id="nguHanhAttribute" value={formData.nguHanhAttribute || ''} onChange={e => handleChange('nguHanhAttribute', e.target.value)} className="w-full bg-slate-800 border border-slate-600 rounded-lg px-3 py-2 text-sm text-white focus:outline-none focus:ring-1 focus:ring-yellow-500">
                        <option value="">-- Ch·ªçn --</option>
                        <option value="kim">‚öôÔ∏è Kim</option>
                        <option value="moc">üå≥ M·ªôc</option>
                        <option value="thuy">üíß Th·ªßy</option>
                        <option value="hoa">üî• H·ªèa</option>
                        <option value="tho">‚õ∞Ô∏è Th·ªï</option>
                    </select>
                </div>
                {formData.consumableType === 'ƒêan d∆∞·ª£c' && <EffectSelector selectedIds={formData.effectIds || []} onChange={handleEffectIdsChange} itemType="item" onOpen={handleEffectSelectorOpen}/>}
            </div>
            {/* Right Column */}
            <div className="space-y-4">
                {renderAttributeFields()}
                <details className="bg-slate-900/50 p-3 rounded-lg border border-slate-700" open={!!formData.enableRecovery}>
                    <summary className="font-semibold text-yellow-300 cursor-pointer flex items-center gap-2" onClick={(e) => { e.preventDefault(); handleChange('enableRecovery', !formData.enableRecovery); }}>
                        <input
                            type="checkbox"
                            checked={!!formData.enableRecovery}
                            onChange={e => handleChange('enableRecovery', e.target.checked)}
                            onClick={e => e.stopPropagation()}
                            className="h-4 w-4 rounded border-gray-500 bg-slate-700 text-yellow-500 flex-shrink-0"
                        />
                        <span>H·ªìi ph·ª•c</span>
                    </summary>
                    {formData.enableRecovery && (
                        <div className="mt-2 pt-3 border-t border-slate-700 space-y-4">
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                {renderField('recoveryHp', 'Sinh l·ª±c', 'number')}
                                {renderField('recoverySpiritPower', 'Linh l·ª±c', 'number')}
                                {renderField('recoveryStamina', 'Th·ªÉ l·ª±c', 'number')}
                                {renderField('recoveryMentalState', 'T√¢m c·∫£nh', 'number')}
                            </div>
                            <div className="pt-2 border-t border-slate-800 flex items-center gap-2">
                                 <input id="enableRecoveryOverTime" type="checkbox" checked={formData['enableRecoveryOverTime'] || false} onChange={e => handleChange('enableRecoveryOverTime', e.target.checked)} className="h-5 w-5 rounded border-gray-500 bg-slate-700 text-yellow-500" />
                                <label htmlFor="enableRecoveryOverTime" className="text-sm font-medium text-slate-200">{recoveryOverTimeLabel}</label>
                            </div>
                            {formData.enableRecoveryOverTime && (
                                renderField('recoveryDuration', 'S·ªë l∆∞·ª£t t√°c d·ª•ng', 'select', ['2', '3', '4', '5', '10', '20'])
                            )}
                        </div>
                    )}
                </details>
            </div>
        </div>
    );
};
